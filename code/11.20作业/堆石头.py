'''
堆石子:
在一片沙滩上摆放着n堆石子。现要将石子有次序地合并成一堆。规定每次选2堆相邻石子合并成新的一堆，合并的费用为新的一堆石子数。试设计一个算法，计算出将n堆石子合并成一堆的最小总费用。
输入:多组数据
输入数据第1行有1个正整数n（1≤n≤300），表示有n堆石子，每次选2堆石子合并。第2行有n个整数，分别表示每堆石子的个数（每堆石子的取值范围为[1,1000]）。
输出:数据输出为一行，表示对应输入的最小总费用。
样例输入
7
45 13 12 16 9 5 22
样例输出
313
'''
# 贪心法：
'''
        75 47
      30  47 45
    30  25  22  45 
   14 16 25 
 14  16 12 13  
5 9  
14 + 25 + 30 + 47 + 75+47+75 =313

       55        67 
   27    28    22 45
 14 13 12 16
5 9 

5+9+12+14+13+16+27+28+22+45+55+67 =313
'''

# 贪心法,每次选择最小的两个点进行累加的方案


def sum_ls(ls):
    res = 0 
    while len(ls) > 1:
        ls = sorted(ls)
        new = ls.pop(0) + ls.pop(0)    
        ls.append(new)
        res += new 
    return res
    
if __name__ == "__main__":
    n = 7
    ls = [45, 13, 12, 16, 9, 5, 22]
    #sorted(ls) [5, 9, 12, 13, 16, 22, 45]
    cost = sum_ls(ls)
    print('the cost is %d'%cost)
